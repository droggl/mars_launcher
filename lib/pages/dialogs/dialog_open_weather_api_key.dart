import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:mars_launcher/logic/temperature_logic.dart';
import 'package:mars_launcher/logic/theme_logic.dart';
import 'package:mars_launcher/services/service_locator.dart';
import 'package:url_launcher/url_launcher.dart';

class OpenWeatherAPIDialog extends StatelessWidget {
  final themeManager = getIt<ThemeManager>();

  @override
  Widget build(BuildContext context) {
    final title = 'Set OpenWeather API key';
    final dialogText = "To provide accurate weather predictions for your location, this app uses the OpenWeather API. "
        "Since the use of the API costs something from 1000 API calls per day and this app is "
        "and should remain free of charge, anyone who is interested can generate and insert their own API key. "
        "A API key can be generated by creating an account on ";

    final backgroundColor = themeManager.theme.scaffoldBackgroundColor;
    final textColor = themeManager.theme.primaryColor;

    return AlertDialog(
      backgroundColor: backgroundColor,
      title: Text(
        title,
        style: TextStyle(
          fontWeight: FontWeight.bold,
          fontSize: 20,
          color: textColor,
        ),
      ),
      content: SingleChildScrollView(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.end,
          children: [
            RichText(
              textAlign: TextAlign.justify,
              softWrap: true,
              text: TextSpan(
                style: TextStyle(fontSize: 13, color: Colors.black),
                children: [
                  TextSpan(
                      text: dialogText,
                      style: TextStyle(
                        color: textColor,
                      )),
                  TextSpan(
                    text: "OpenWeatherMap",
                    style: TextStyle(
                      color: Colors.blue, // Set the color of the link
                    ),
                    recognizer: TapGestureRecognizer()
                      ..onTap = () {
                        // Define the URL to open when the link is tapped
                        final uri = Uri.parse("https://openweathermap.org/api");

                        // Use the url_launcher package to open the URL
                        launchUrl(uri);
                      },
                  ),
                  TextSpan(
                    text: ".",
                  ),
                ],
              ),
            ),
            SizedBox(
              height: 14,
            ),
            OpenWeatherApiKeyTextField(textColor: textColor),
          ],
        ),
      ),
    );
  }
}

class OpenWeatherApiKeyTextField extends StatefulWidget {
  final textColor;

  const OpenWeatherApiKeyTextField({Key? key, required this.textColor}) : super(key: key);

  @override
  _OpenWeatherApiKeyTextFieldState createState() => _OpenWeatherApiKeyTextFieldState();
}

class _OpenWeatherApiKeyTextFieldState extends State<OpenWeatherApiKeyTextField> {
  TextEditingController _controller = TextEditingController();
  String? _errorText;

  final temperatureLogic = getIt<TemperatureLogic>();

  @override
  void initState() {
    super.initState();
    if (temperatureLogic.apiKey != null && temperatureLogic.apiKey!.isNotEmpty) {
      _controller.text = temperatureLogic.apiKey!;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        TextField(
          cursorColor: widget.textColor,
          controller: _controller,
          decoration: InputDecoration(
              hintText: "Enter API Key",
              errorText: _errorText,
              enabledBorder: UnderlineInputBorder(borderSide: BorderSide(color: widget.textColor)),
              focusedBorder: UnderlineInputBorder(borderSide: BorderSide(color: widget.textColor))),
        ),
        SizedBox(height: 16.0),
        Row(children: [
          ElevatedButton(
            onPressed: () {
              temperatureLogic.deleteAPIKey();
              _controller.text = "";
              setErrorText(null);
            },
            child: const Text("DELETE"),
            style: TextButton.styleFrom(foregroundColor: Colors.white, backgroundColor: Colors.redAccent),
          ),
          Expanded(child: SizedBox()),
          ElevatedButton(
            child: const Text('ADD'),
            onPressed: () async {
              var apiKey = _controller.text.trim();
              if (await isInputValid(apiKey)) {
                temperatureLogic.addApiKey(apiKey);

                Navigator.of(context).pop();
              }
            },
            style: TextButton.styleFrom(
              foregroundColor: Colors.white,
              backgroundColor: Colors.black87,
            ),
          ),
        ]),
      ],
    );
  }

  /// Checks if apiKey is not empty and valid
  Future<bool> isInputValid(apiKey) async {
    if (apiKey.isEmpty) {
      setErrorText('Field cannot be empty');
      return false;
    } else {
      final isValid = await temperatureLogic.isApiKeyValid(apiKey);
      if (!isValid) {
        setErrorText('API Key not valid');
        return false;
      } else {
        setErrorText(null);
        return true;
      }
    }
  }

  void setErrorText(errorText) {
    setState(() {
      _errorText = errorText;
    });
  }
}
